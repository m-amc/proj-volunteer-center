{"version":3,"sources":["firebase.js","components/state.js","components/Header.js","components/Opportunities.js","components/Category.js","alerts.js","components/Management.js","components/Footer.js","fontawesome.js","components/FilterCategory.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","stateData","postings","id","organization","address","state","city","phone","website","email","category","role","role_description","start_date","Date","end_date","created","now","isManagement","isNoResult","headerButtonText","filteredCategory","Header","app","className","type","value","onClick","event","preventDefault","newState","setState","Opportunities","props","postingData","map","post","index","key","toLocaleDateString","email_address","Category","name","onChange","required","defaultText","MySwal","withReactContent","Swal","saveSuccessful","fire","position","title","showConfirmButton","timer","Management","dbRef","child","appState","handleChange","target","action","onSubmit","text","newPostRef","push","set","successful","htmlFor","placeholder","size","disabled","pattern","maxLength","selected","e","minDate","Footer","href","aria-label","icon","aria-hidden","library","add","fab","FilterCategory","handleCategoryChange","App","filterPostingData","filterPostings","newPostingData","isEmpty","length","postingObject","selectedCategory","filteredPostings","momentEndDate","moment","momentToday","today","undefined","database","ref","this","on","response","val","posting","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAYAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECQeS,EAtBI,CACfC,SAAU,GACVC,GAAI,GACJC,aAAc,GACdC,QAAS,GACTC,MAAO,KACPC,KAAM,UACNC,MAAO,GACPC,QAAS,GACTC,MAAO,GACPC,SAAU,GACVC,KAAM,GACNC,iBAAkB,GAClBC,WAAY,IAAIC,KAChBC,SAAU,IAAID,KACdE,QAASF,KAAKG,MACdC,cAAc,EACdC,YAAY,EACZC,iBAAkB,qBAClBC,iBAAkB,ICyBPC,G,MAzCA,SAAC,GAAW,IAAVC,EAAS,EAATA,IA2Bb,OACI,4BAAQC,UAAWD,EAAIlB,MAAMa,aAAe,mBAAqB,IAC7D,6BACI,gDACA,2BAAOO,KAAK,SACRC,MAAOH,EAAIlB,MAAMe,iBACjBO,QAhCK,SAACC,GAClBA,EAAMC,iBAON,IAAIC,EAAW,GAGXA,EADAP,EAAIlB,MAAMa,aACC,CACPA,cAAc,EACdE,iBAAkB,sBAGX,CACPF,cAAc,EACdE,iBAAkB,iBAK1BG,EAAIQ,SAASD,OAYT,uBAAGN,UAAU,eAAb,qCCDGQ,EAnCO,SAACC,GACnB,IAAMC,EAAcD,EAAMC,YAE1B,OACI,4BAEQA,EAAYC,IAAI,SAACC,EAAMC,GACnB,OACI,wBAAIC,IAAKD,GACL,6BACI,4BAAKD,EAAKzB,MACV,uBAAGa,UAAU,oBAAb,QAAsCY,EAAKvB,WAA3C,OAA2DuB,EAAKrB,UAChE,uBAAGS,UAAU,0BAA0BY,EAAKxB,kBAC5C,uBAAGY,UAAU,cAAb,UAAkC,IAAIV,KAAKsB,EAAKpB,SAASuB,uBAG7D,6BACI,4BAAKH,EAAKjC,cACV,uBAAGqB,UAAU,kBAAkBY,EAAKhC,QAApC,IAA6C,8BAAOgC,EAAK9B,KAAZ,MAAqB8B,EAAK/B,QACvE,2BAAI+B,EAAK7B,OACT,2BAAI6B,EAAK5B,SACT,2BAAI4B,EAAKI,qB,QCG1BC,EAxBE,SAACR,GACd,OACI,4BACIS,KAAMT,EAAMS,KACZC,SAAUV,EAAMU,SAChBjB,MAAOO,EAAMP,MACbkB,SAAUX,EAAMW,UAChB,4BAAQlB,MAAM,IAAIO,EAAMY,aACxB,4BAAQnB,MAAM,aAAd,aACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,cAAd,eACA,4BAAQA,MAAM,WAAd,kB,kDCXNoB,E,MAASC,GAAiBC,KAoBjBC,EAlBQ,WACnBH,EAAOI,KAAK,CACRC,SAAU,SACV1B,KAAM,UACN2B,MAAO,yBACPC,mBAAmB,EACnBC,MAAO,QC6MAC,G,cA/MI,SAACtB,GAChB,IAAMuB,EAAQvB,EAAMV,IAAIiC,MAAMC,MAAM,WAChCC,EAAWzB,EAAMV,IAAIlB,MACrBkB,EAAMU,EAAMV,IAkDVoC,EAAe,SAAC/B,GAClBL,EAAIQ,SAAJ,eACKH,EAAMgC,OAAOlB,KAAOd,EAAMgC,OAAOlC,SAI1C,OACI,0BAAMmC,OAAO,GAAGC,SAvDC,SAAClC,GAIlB,GAHAA,EAAMC,iBAGF6B,EAAS3C,SAAW2C,EAAS7C,WDFrCiC,EAAOI,KAAK,CACRzB,KAAM,QACN2B,MAAO,mBACPW,KAAM,8BCDN,CAMA,IAAMC,EAAaR,EAAMS,OACzBD,EAAWE,IAAI,CACXhE,GAAI8D,EAAW1B,IACfnC,aAAcuD,EAASvD,aACvBC,QAASsD,EAAStD,QAClBC,MAAO,KACPC,KAAM,UACNC,MAAOmD,EAASnD,MAChBC,QAASkD,EAASlD,QAClBC,MAAOiD,EAASjD,MAChBC,SAAUgD,EAAShD,SACnBC,KAAM+C,EAAS/C,KACfC,iBAAkB8C,EAAS9C,iBAC3BC,WAAY6C,EAAS7C,WAAW0B,qBAChCxB,SAAU2C,EAAS3C,SAASwB,qBAC5BvB,QAAS0C,EAAS1C,UAItBO,EAAIQ,SAAS,CACT5B,aAAc,GACdC,QAAS,GACTC,MAAO,KACPC,KAAM,UACNC,MAAO,GACPC,QAAS,GACTC,MAAO,GACPC,SAAU,GACVC,KAAM,GACNC,iBAAkB,GAClBC,WAAY,IAAIC,KAChBC,SAAU,IAAID,KACdE,QAASF,KAAKG,QAGlBkD,OAWI,yBAAK3C,UAAU,qBACX,kCACI,uDACA,2BAAO4C,QAAQ,gBAAf,qBACA,2BACIlE,GAAG,eACHuB,KAAK,OACLiB,KAAK,eACLC,SAAUgB,EACVjC,MAAOgC,EAASvD,aAChBkE,YAAY,cACZC,KAAK,KACL1B,UAAQ,IAGZ,2BAAOwB,QAAQ,WAAf,WACA,2BACIlE,GAAG,UACHuB,KAAK,OACLiB,KAAK,UACLC,SAAUgB,EACVjC,MAAOgC,EAAStD,QAChBiE,YAAY,kBACZzB,UAAQ,IAGZ,2BAAOwB,QAAQ,QAAf,QACA,2BACIlE,GAAG,OACHuB,KAAK,OACLiB,KAAK,OACLC,SAAUgB,EACVjC,MAAOgC,EAASpD,KAChBiE,UAAQ,IAGZ,2BAAOH,QAAQ,SAAf,SACA,2BACIlE,GAAG,QACHuB,KAAK,OACLiB,KAAK,QACLC,SAAUgB,EACVjC,MAAOgC,EAASrD,MAChBkE,UAAQ,IAGZ,2BAAOH,QAAQ,SAAf,SACA,2BACIlE,GAAG,QACHuB,KAAK,MACLiB,KAAK,QACL8B,QAAQ,2BACR7B,SAAUgB,EACVjC,MAAOgC,EAASnD,MAChB8D,YAAY,eACZzB,UAAQ,IAGZ,2BAAOwB,QAAQ,WAAf,WACA,2BACIlE,GAAG,UACHuB,KAAK,MACLiB,KAAK,UACLC,SAAUgB,EACVjC,MAAOgC,EAASlD,QAChB6D,YAAY,2BAGhB,2BAAOD,QAAQ,SAAf,SACA,2BACIlE,GAAG,QACHuB,KAAK,QACLiB,KAAK,QACLC,SAAUgB,EACVjC,MAAOgC,EAASjD,MAChB6D,KAAK,KACLD,YAAY,wBAIpB,kCACI,kDACA,2BAAOD,QAAQ,YAAf,YACA,kBAAC,EAAD,CACI1B,KAAK,WACLxC,GAAG,WACHqB,IAAKA,EACLoB,SAAUgB,EACVjC,MAAOgC,EAAShD,SAChBkC,SAAS,WACTC,YAAY,oBAGhB,2BAAOuB,QAAQ,QAAf,QACA,2BACIlE,GAAG,OACHuB,KAAK,OACLiB,KAAK,OACLC,SAAUgB,EACVjC,MAAOgC,EAAS/C,KAChBiC,UAAQ,IAGZ,2BAAOwB,QAAQ,mBAAf,eACA,8BACI5C,UAAU,WACViD,UAAU,MACVvE,GAAG,kBACHuB,KAAK,OACLiB,KAAK,mBACLC,SAAUgB,EACVjC,MAAOgC,EAAS9C,iBAChByD,YAAY,oEACZzB,UAAQ,IAGZ,yBAAKpB,UAAU,yBACX,yBAAKA,UAAU,iBACX,2BAAO4C,QAAQ,aAAf,cACA,kBAAC,IAAD,CACIM,SAAUhB,EAAS7C,WACnB8B,SAAU,SAACgC,GAAD,OAAOpD,EAAIQ,SAAS,CAAElB,WAAY8D,KAC5CC,QAAS,IAAI9D,QAIrB,yBAAKU,UAAU,iBACX,2BAAO4C,QAAQ,WAAf,YACA,kBAAC,IAAD,CACIM,SAAUhB,EAAS3C,SACnB4B,SAAU,SAACgC,GAAD,OAAOpD,EAAIQ,SAAS,CAAEhB,SAAU4D,KAC1CC,QAASlB,EAAS7C,iBAMtC,4BAAQW,UAAU,cAAlB,a,iBC9KGqD,EA7BA,WACX,OACI,gCACI,yBAAKrD,UAAU,WACX,oDACA,4BACI,4BACI,uBAAGsD,KAAK,sCAAsCC,aAAW,iBACrD,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,kBAAmBC,eAAA,MAI1D,4BACI,uBAAGH,KAAK,+CAA+CC,aAAW,kBAC9D,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,YAAaC,eAAA,MAIpD,4BACI,uBAAGH,KAAK,qCAAqCC,aAAW,gBACpD,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,UAAWC,eAAA,U,yBCrBtEC,IAAQC,IAAIC,KCAZ,IAaeC,EAbQ,SAAC,GAAW,IAAV9D,EAAS,EAATA,IACrB,OACI,yBAAKC,UAAU,kBACX,sCACA,kBAAC,EAAD,CACImB,SAAUpB,EAAI+D,qBACd5D,MAAOH,EAAIlB,MAAMgB,iBACjBwB,YAAY,mB,iBCwHb0C,E,YAjHb,aAAe,IAAD,8BACZ,+CAoCFD,qBAAuB,SAAC1D,GACtB,IAAM4D,EAAoB,EAAKC,eAAe,EAAKvD,YAAaN,EAAMgC,OAAOlC,OACvEgE,EAAiB,GAGvB,IAAK,IAAIrD,KAASmD,EAChBE,EAAezB,KAAKuB,EAAkBnD,IAGxC,IAAMsD,IAAUD,EAAeE,OAAS,GAExC,EAAK7D,SAAS,CACZV,iBAAkBO,EAAMgC,OAAOlC,MAC/BP,WAAYwE,EACZ1F,SAAUyF,KAnDA,EAwDdD,eAAiB,SAACI,EAAeC,GAE/B,IAAMC,EAAmB,GAGzB,IAAK,IAAIzD,KAAOuD,EAAe,CAE7B,IAAMG,EAAgBC,IAAOJ,EAAcvD,GAAKvB,UAC1CmF,EAAcD,IAAO,EAAKE,MAAM5D,sBAEhC7B,EAAWmF,EAAcvD,GAAK5B,cAGV0F,IAArBN,GAAyD,KAArBA,EAEnCE,GAAiBE,IACnBH,EAAiBzD,GAAOuD,EAAcvD,IAGpC0D,GAAiBE,GAAexF,IAAaoF,IAC/CC,EAAiBzD,GAAOuD,EAAcvD,IAK5C,OAAOyD,GA7EP,EAAK1F,MAAQL,EAEb,EAAKmG,MAAQ,IAAIrF,KAEjB,EAAK0C,MAAQjE,EAAS8G,WAAWC,MARrB,E,iFAWO,IAAD,OACJC,KAAK/C,MAEbgD,GAAG,QAAS,SAACC,GAEjB,EAAKvE,YAAcuE,EAASC,MAAMC,QAGlC,IAAMZ,EAAmB,EAAKN,eAAe,EAAKvD,aAG5CwD,EAAiB,GAIvB,IAAK,IAAIrD,KAAS0D,EAChBL,EAAezB,KAAK,EAAK/B,YAAYG,IAIvC,EAAKN,SAAS,CACZ9B,SAAUyF,Q,+BAqDd,OACE,yBAAKlE,UAAU,OACb,uBAAGsD,KAAK,QAAQtD,UAAU,aAA1B,yBAEA,kBAAC,EAAD,CAAQD,IAAKgF,OAEb,0BAAMrG,GAAG,OAAOsB,UAAU,WACxB,iCAEI+E,KAAKlG,MAAMa,aAAe,kBAAC,EAAD,CAAYK,IAAKgF,OACzC,kBAAC,IAAMK,SAAP,KACE,kBAAC,EAAD,CAAgBrF,IAAKgF,OACrB,kBAAC,EAAD,CAAerE,YAAaqE,KAAKlG,MAAMJ,aAK/C,yBAAKuB,UAAW+E,KAAKlG,MAAMc,WAAa,eAAiB,gBACvD,gFAIJ,kBAAC,EAAD,W,GA5GU0F,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.64180272.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDYZS3jKKLuglNpC9dcc6-iEdvUItaHi0A\",\n    authDomain: \"volunteer-center.firebaseapp.com\",\n    databaseURL: \"https://volunteer-center.firebaseio.com\",\n    projectId: \"volunteer-center\",\n    storageBucket: \"\",\n    messagingSenderId: \"893009596874\",\n    appId: \"1:893009596874:web:84684da9c2ec072d5eff33\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","const stateData =  {\n    postings: [],\n    id: '',\n    organization: '',\n    address: '',\n    state: 'ON',\n    city: 'Toronto',\n    phone: '',\n    website: '',\n    email: '',\n    category: '',\n    role: '',\n    role_description: '',\n    start_date: new Date(),\n    end_date: new Date(),\n    created: Date.now(),\n    isManagement: false,\n    isNoResult: false,\n    headerButtonText: 'Post Opportunities',\n    filteredCategory: ''\n}\n\nexport default stateData;","import React from 'react';\nimport '../partials/_header.scss';\n\nconst Header = ({app}) => {\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        /* \n        isManagement state is false if it's in the Listings view. onClick will set isManagement to true and the button will change text to View Listing.  \n        isManagement state is true if it's in the Management view. onClick will set isManagement to false and the button will change text to Post Opportunities\n        */\n\n        let newState = {};\n\n        if (app.state.isManagement) {\n            newState = {\n                isManagement: false,\n                headerButtonText: 'Post Opportunities'\n            }\n        } else {\n            newState = {\n                isManagement: true,\n                headerButtonText: 'View Postings'\n            }\n        }\n\n        // Set the app state with newState\n        app.setState(newState);\n    }\n\n    return(\n        <header className={app.state.isManagement ? 'managementHeader' : ''}>\n            <div>\n                <h1>Volunteer Center</h1>\n                <input type=\"submit\"\n                    value={app.state.headerButtonText}\n                    onClick={handleSubmit}\n                />\n            </div>\n            <p className=\"photoCredit\">Photo by Anna Earl on Unsplash</p>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Opportunities = (props) => {\n    const postingData = props.postingData;\n\n    return (\n        <ul>\n            {\n                postingData.map((post, index) => {\n                    return (\n                        <li key={index}>\n                            <div>\n                                <h2>{post.role}</h2>\n                                <p className=\"postingDateRange\">From {post.start_date} to {post.end_date}</p>\n                                <p className=\"postingRoleDescription\">{post.role_description}</p>\n                                <p className=\"postedDate\">Posted {new Date(post.created).toLocaleDateString()}</p>\n                            </div>\n\n                            <div>\n                                <h3>{post.organization}</h3>\n                                <p className=\"postingAddress\">{post.address} <span>{post.city},  {post.state}</span></p>\n                                <p>{post.phone}</p>\n                                <p>{post.website}</p>\n                                <p>{post.email_address}</p>\n                            </div>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n    )\n}\n\nOpportunities.propTypes = {\n    props: PropTypes.object\n}\n\nexport default Opportunities;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Category = (props) => {\n    return (        \n        <select\n            name={props.name}\n            onChange={props.onChange}\n            value={props.value}\n            required={props.required}>\n            <option value=\"\">{props.defaultText}</option>\n            <option value=\"community\">Community</option>\n            <option value=\"education\">Education</option>\n            <option value=\"healthcare\">Health Care</option>\n            <option value=\"animals\">Pets/Animals</option>\n        </select>\n    )\n}\n\nCategory.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    required: PropTypes.string,\n    defaultText: PropTypes.string\n}\n\nexport default Category;","import Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst MySwal = withReactContent(Swal);\n\nconst saveSuccessful = () => {\n    MySwal.fire({\n        position: 'center',\n        type: 'success',\n        title: 'Posting has been saved',\n        showConfirmButton: false,\n        timer: 1500\n    })\n}\n\nexport const dateRangeError = () => {        \n    MySwal.fire({\n        type: 'error',\n        title: 'Date Range Error',\n        text: 'Please fix your dates',\n    })\n}\n\nexport default saveSuccessful;","import React from 'react';\nimport Category from './Category';\nimport PropTypes from 'prop-types';\nimport '../partials/_main.scss';\nimport DatePicker from \"react-datepicker\";\nimport successful, {dateRangeError} from '../alerts'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nconst Management = (props) => {\n    const dbRef = props.app.dbRef.child('posting'),\n        appState = props.app.state,\n        app = props.app;\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        // Validate date range. Do not continue if there's an error. \n        if (appState.end_date < appState.start_date) {\n            dateRangeError();\n            return\n        }\n        \n        // The dbRef push property will be able to return the object key but it needs to be assigned to variable first before setting the state\n        const newPostRef = dbRef.push();\n        newPostRef.set({\n            id: newPostRef.key,\n            organization: appState.organization,\n            address: appState.address,\n            state: 'ON',\n            city: 'Toronto',\n            phone: appState.phone,\n            website: appState.website,\n            email: appState.email,\n            category: appState.category,\n            role: appState.role,\n            role_description: appState.role_description,\n            start_date: appState.start_date.toLocaleDateString(),\n            end_date: appState.end_date.toLocaleDateString(),\n            created: appState.created\n        });\n\n        // Clear the fields after submit\n        app.setState({\n            organization: '',\n            address: '',\n            state: 'ON',\n            city: 'Toronto',\n            phone: '',\n            website: '',\n            email: '',\n            category: '',\n            role: '',\n            role_description: '',\n            start_date: new Date(),\n            end_date: new Date(),\n            created: Date.now()\n        })\n\n        successful();\n    }\n\n    const handleChange = (event) => {\n        app.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    return (\n        <form action=\"\" onSubmit={handleSubmit}>\n            <div className=\"fieldsetContainer\">\n                <fieldset>\n                    <legend>Company Information</legend>\n                    <label htmlFor=\"organization\">Organization Name</label>\n                    <input\n                        id=\"organization\"\n                        type=\"text\"\n                        name=\"organization\"\n                        onChange={handleChange}\n                        value={appState.organization}\n                        placeholder=\"Company ABC\"\n                        size=\"30\"\n                        required\n                    />\n\n                    <label htmlFor=\"address\">Address</label>\n                    <input\n                        id=\"address\"\n                        type=\"text\"\n                        name=\"address\"\n                        onChange={handleChange}\n                        value={appState.address}\n                        placeholder=\"123 Main Street\"\n                        required\n                    />\n\n                    <label htmlFor=\"city\">City</label>\n                    <input\n                        id=\"city\"\n                        type=\"text\"\n                        name=\"city\"\n                        onChange={handleChange}\n                        value={appState.city}\n                        disabled\n                    />\n\n                    <label htmlFor=\"state\">State</label>\n                    <input\n                        id=\"state\"\n                        type=\"text\"\n                        name=\"state\"\n                        onChange={handleChange}\n                        value={appState.state}\n                        disabled\n                    />\n\n                    <label htmlFor=\"phone\">Phone</label>\n                    <input\n                        id=\"phone\"\n                        type=\"tel\"\n                        name=\"phone\"\n                        pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\"\n                        onChange={handleChange}\n                        value={appState.phone}\n                        placeholder=\"416-xxx-xxxx\"\n                        required\n                    />\n\n                    <label htmlFor=\"website\">Website</label>\n                    <input\n                        id=\"website\"\n                        type=\"url\"\n                        name=\"website\"\n                        onChange={handleChange}\n                        value={appState.website}\n                        placeholder=\"http://yourcompany.com\"\n                    />\n\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        name=\"email\"\n                        onChange={handleChange}\n                        value={appState.email}\n                        size=\"30\"\n                        placeholder=\"johndoe@domain.com\"\n                    />\n                </fieldset>\n\n                <fieldset>\n                    <legend>About the Role</legend>\n                    <label htmlFor=\"Category\">Category</label>\n                    <Category\n                        name=\"category\"\n                        id=\"category\"\n                        app={app}\n                        onChange={handleChange}\n                        value={appState.category}\n                        required=\"required\"\n                        defaultText=\"Select Category\"\n                    />\n\n                    <label htmlFor=\"role\">Role</label>\n                    <input\n                        id=\"role\"\n                        type=\"text\"\n                        name=\"role\"\n                        onChange={handleChange}\n                        value={appState.role}\n                        required\n                    />\n\n                    <label htmlFor=\"roleDescription\">Description</label>\n                    <textarea\n                        className=\"textArea\"\n                        maxLength=\"500\"\n                        id=\"roleDescription\"\n                        type=\"text\"\n                        name=\"role_description\"\n                        onChange={handleChange}\n                        value={appState.role_description}\n                        placeholder=\"What is the role about? How to apply? (Maximum of 500 characters)\"\n                        required\n                    />\n\n                    <div className=\"startEndDateContainer\">\n                        <div className=\"dateContainer\">\n                            <label htmlFor=\"startDate\">Start Date</label>\n                            <DatePicker\n                                selected={appState.start_date}\n                                onChange={(e) => app.setState({ start_date: e })}\n                                minDate={new Date()}\n                            />\n                        </div>\n\n                        <div className=\"dateContainer\">\n                            <label htmlFor=\"endDate\">End Date</label>\n                            <DatePicker\n                                selected={appState.end_date}\n                                onChange={(e) => app.setState({ end_date: e })}\n                                minDate={appState.start_date}\n                            />\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n            <button className=\"formSubmit\">SUBMIT</button>\n        </form>\n    )\n}\n\nManagement.propTypes = {\n    props: PropTypes.object\n};\n\nexport default Management;","import React from 'react';\nimport '../partials/_footer.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Footer = () => {\n    return(\n        <footer> \n            <div className=\"wrapper\">\n                <p>&copy; 2019 Ana Morales</p>\n                <ul>\n                    <li>\n                        <a href=\"https://twitter.com/class_AnaTheDev\" aria-label=\"Go to twitter\">\n                            <FontAwesomeIcon icon={['fab', 'twitter-square']} aria-hidden/>\n                        </a>\n                    </li>\n\n                    <li>\n                        <a href=\"https://www.linkedin.com/in/anamariemorales/\" aria-label=\"Go to linkedin\">\n                            <FontAwesomeIcon icon={['fab', 'linkedin']} aria-hidden/>\n                        </a>\n                    </li>\n\n                    <li>\n                        <a href=\"https://medium.com/@anamorales.dev\" aria-label=\"Go to Medium\">\n                            <FontAwesomeIcon icon={['fab', 'medium']} aria-hidden/>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(fab);","import React from 'react';\nimport Category from './Category';\n\nconst FilterCategory = ({app}) => {\n    return (\n        <div className=\"filterCategory\">\n            <p>Filter:</p>\n            <Category\n                onChange={app.handleCategoryChange}\n                value={app.state.filteredCategory}\n                defaultText=\"All Category\"\n            />\n        </div>\n    )\n}\n\nexport default FilterCategory;","import React, { Component } from 'react';\nimport firebase from '../firebase';\nimport stateData from './state';\nimport Header from './Header';\nimport Opportunities from './Opportunities';\nimport Management from './Management';\nimport Footer from './Footer';\nimport '.././partials/App.scss';\nimport '../fontawesome';\nimport FilterCategory from './FilterCategory';\nimport moment from 'moment';\n\n/*\nNOTE: The firebase volunteer-center database will (in the future) have a couple of objects in it.  For example, company.  For this project, I will only have 1 object but the structure is prepared to have multiple objects hence why the use of \"child\". I am planning to build more on top of the existing functionality after the bootcamp.\n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // Set state to the state.js stateData variable.\n    this.state = stateData;\n\n    this.today = new Date();\n\n    this.dbRef = firebase.database().ref();\n  }\n\n  componentDidMount() {\n    const dbRef = this.dbRef;\n\n    dbRef.on('value', (response) => {\n      // response returns the whole database object so just grab the child (posting)\n      this.postingData = response.val().posting;\n\n      // Filter the postings where end dates are greater or equal to today's date\n      const filteredPostings = this.filterPostings(this.postingData);\n\n      // Because we can't directly change the state, we have to create a new array.\n      const newPostingData = [];\n\n      // Loop through the postingData variable that holds the posting data object and push the data to the new array.  This will render the data to the page via render().  Any new data added will also re-render due to dbRef.on('value') always listening to changes.\n      // eslint-disable-next-line\n      for (let index in filteredPostings) {\n        newPostingData.push(this.postingData[index])\n      }\n\n      // Here we re-assign the postings state to the newPostingData and we need to clear the role state.\n      this.setState({\n        postings: newPostingData,\n      })\n    })\n  }\n\n  handleCategoryChange = (event) => {\n    const filterPostingData = this.filterPostings(this.postingData, event.target.value);\n    const newPostingData = [];\n\n    // eslint-disable-next-line\n    for (let index in filterPostingData) {\n      newPostingData.push(filterPostingData[index])\n    }\n\n    const isEmpty = newPostingData.length > 0 ? false : true\n\n    this.setState({\n      filteredCategory: event.target.value,\n      isNoResult: isEmpty,\n      postings: newPostingData\n    });\n  }\n\n  // Function to filter the postings. There's no filter() for objects so we need to filter it through for in loop\n  filterPostings = (postingObject, selectedCategory) => {\n    // Create an empty filteredPostings object.  We will push filtered postings here\n    const filteredPostings = {};\n\n    // eslint-disable-next-line\n    for (let key in postingObject) {\n      // use momentjs to correctly parse the date string\n      const momentEndDate = moment(postingObject[key].end_date);\n      const momentToday = moment(this.today.toLocaleDateString());\n\n      const category = postingObject[key].category;\n\n      // undefined is the value of the category filter on initial load. It's empty string when All Category is selected.\n      if ((selectedCategory === undefined) || (selectedCategory === '')) {\n        // Push to the filteredPostings object those postings that are ending today and in the future\n        if (momentEndDate >= momentToday) {\n          filteredPostings[key] = postingObject[key];\n        }\n      } else {\n        if (momentEndDate >= momentToday && category === selectedCategory) {\n          filteredPostings[key] = postingObject[key];\n        }\n      }\n    }\n\n    return filteredPostings;\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <a href=\"#main\" className=\"skip-link\">Skip to main content.</a>\n\n        <Header app={this} />\n\n        <main id=\"main\" className=\"wrapper\">\n          <section>\n            {\n              this.state.isManagement ? <Management app={this} /> : \n                <React.Fragment>\n                  <FilterCategory app={this} />\n                  <Opportunities postingData={this.state.postings} />\n                </React.Fragment>\n            }\n          </section>\n\n          <div className={this.state.isNoResult ? 'showNoResult' : 'hideNoResult'}>\n            <p>No opportunities for this category at this time</p>\n          </div>\n        </main>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}